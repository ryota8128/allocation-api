<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.moneyAllocation.repository.mybatis.TemporaryTransferMapper">
    <resultMap id="TemporaryTransfer" type="com.example.moneyAllocation.domain.TemporaryTransfer">
        <id property="id" column="ID"/>
        <result property="fromAccountName" column="FROM_ACCOUNT_NAME"/>
        <result property="toAccountName" column="TO_ACCOUNT_NAME"/>
        <result property="description" column="DESCRIPTION"/>
        <result property="amount" column="AMOUNT"/>
        <result property="userId" column="USER_ID"/>
    </resultMap>

    <select id="find" resultMap="TemporaryTransfer">
        SELECT
        T.ID,
        A_FROM.name AS FROM_ACCOUNT_NAME,
        A_TO.name AS TO_ACCOUNT_NAME,
        T.DESCRIPTION,
        T.AMOUNT,
        T.USER_ID,
        T.TRANSFER_ID
        FROM TEMPORARY_TRANSFER AS T
        LEFT OUTER JOIN ACCOUNT AS A_FROM ON A_FROM.ID = T.FROM_ACCOUNT
        LEFT OUTER JOIN ACCOUNT AS A_TO ON A_TO.ID = T.TO_ACCOUNT
        <where>
            T.USER_ID = #{userId}
        </where>
        ORDER BY ID
    </select>

    <select id="findOne" resultMap="TemporaryTransfer" parameterType="com.example.moneyAllocation.domain.TransferSelector">
        SELECT
        T.ID,
        AF.name AS FROM_ACCOUNT_NAME,
        AT.name AS TO_ACCOUNT_NAME,
        T.DESCRIPTION,
        T.AMOUNT,
        T.USER_ID,
        T.TRANSFER_ID
        FROM TEMPORARY_TRANSFER AS T
        LEFT OUTER JOIN ACCOUNT AS AF ON AF.ID = T.FROM_ACCOUNT
        LEFT OUTER JOIN ACCOUNT AS AT ON AT.ID = T.TO_ACCOUNT
        <where>
            T.ID = #{id}
            AND
            T.USER_ID = #{userId}
        </where>
    </select>

    <insert id="add" parameterType="com.example.moneyAllocation.domain.TemporaryTransfer" useGeneratedKeys="true"
            keyProperty="id">
        INSERT INTO TEMPORARY_TRANSFER
        (
        from_account,
        to_account,
        description,
        amount,
        user_id,
        transfer_id
        )
        VALUES
        (
        #{fromAccount},
        #{toAccount},
        #{description},
        #{amount},
        #{userId},
        #{transferId}
        )
    </insert>

    <update id="set" parameterType="com.example.moneyAllocation.domain.TemporaryTransfer">
        UPDATE TEMPORARY_TRANSFER
        SET
        FROM_ACCOUNT = #{fromAccount},
        TO_ACCOUNT = #{toAccount},
        DESCRIPTION = #{description},
        AMOUNT = #{amount},
        TRANSFER_ID = #{transferId}
        WHERE
        ID = #{id}
        AND USER_ID = #{userId}
    </update>

    <delete id="delete" parameterType="com.example.moneyAllocation.domain.TemporaryTransferSelector">
        DELETE FROM TEMPORARY_TRANSFER
        <where>
            <if test="transferId != null">
                TRANSFER_ID = #{transferId}
            </if>
            <if test="transferId == null">
            ID = #{id}
            AND USER_ID = #{userId}
            </if>
        </where>
    </delete>

    <update id="setNullAccount" parameterType="Long">
        UPDATE temporary_transfer
        SET from_account = CASE
        WHEN from_account = #{accountId} THEN NULL
        ELSE from_account
        END,
        to_account = CASE
        WHEN to_account = #{accountId} THEN NULL
        ELSE to_account
        END
        WHERE from_account = #{accountId} OR to_account = #{accountId};
    </update>
</mapper>